// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init
generator client {
  provider = "prisma-client-js"
  output   = "../app/generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Usuario {
  id           Int      @id @default(autoincrement())
  nome         String
  email        String   @unique
  senhaHash    String
  loggedIn     Boolean  @default(false)
  role         Role     @default(USER)
  createdAt    DateTime @default(now())
  noticias     Noticia[]
  comentarios  Comentarios[]
  perfil       Perfil?
  refreshToken RefreshToken[]
}

model Perfil {
  id     Int       @id @default(autoincrement())
  bio    String
  user   Usuario   @relation(fields: [userId], references: [id])
  userId Int       @unique
}

model Noticia {
  id             Int       @id @default(autoincrement())
  titulo         String
  autor          String
  deck           String
  linhaSuporte   String
  corpo          String
  status         StatusNoticia @default(RASCUNHO)
  createdAt      DateTime  @default(now())
  updatedAt      DateTime  @updatedAt
  firstPublishAt DateTime  @default(now())
  publicado      Boolean?  @default(false)
  tags           Tag[]     @relation("Tags")
  createdBy      Usuario   @relation(fields: [createdById], references: [id])
  createdById    Int
  editoria       Editoria? @relation(fields: [editoriaId], references: [id])
  editoriaId     Int?
  comentarios    Comentarios[]
}

model Comentarios {
  id          Int      @id @default(autoincrement())
  title       String?
  content     String
  noticia     Noticia  @relation(fields: [noticiaId], references: [id])
  noticiaId   Int
  usuario     Usuario  @relation(fields: [usuarioId], references: [id])
  usuarioId   Int
}

model Editoria {
  id           Int      @id @default(autoincrement())
  description  String
  nome         String   @unique
  slug         String   @unique
  noticias     Noticia[]
}

model Tag {
  id       Int       @id @default(autoincrement())
  nome     String    @unique
  noticias Noticia[] @relation("Tags")
}

model Contato {
  id           Int      @id @default(autoincrement())
  nome         String
  email        String   @unique
  mensagem     String
}

model RefreshToken {
  id        Int      @id @default(autoincrement())
  token     String   @unique
  user      Usuario  @relation(fields: [userId], references: [id])
  userId    Int
  expiresAt DateTime
  createdAt DateTime @default(now())
}

enum Role {
  USER
  EDITOR
  MODERADOR
  ADMIN
}

enum StatusNoticia {
  RASCUNHO
  REVISADO
  PUBLICADO
}
